name: Publish Study Definition

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: |
          The GitHub deployment environment
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production
  workflow_call:
  inputs:
    environment:
      description: |
        The GitHub deployment environment.
      required: false
      type: string
      default: development

concurrency:
  group: deployment
  cancel-in-progress: false

jobs:
  determineenvironment:
    name: Determine Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      region: ${{ steps.set-region.outputs.region }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Determine Environment
        id: set-env
        run: |
          if [[ -z "${{ inputs.environment }}" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          else
            echo "environment=${{ inputs.environment }}" >> $GITHUB_OUTPUT
          fi

  vars:
    name: Inject Environment Variables In Deployment Workflow
    needs: determineenvironment
    runs-on: ubuntu-latest
    environment: ${{ needs.determineenvironment.outputs.environment }}
    outputs:
      FIREBASE_PROJECT_ID: ${{ vars.FIREBASE_PROJECT_ID }}
    steps:
      - run: |
          echo "Injecting Environment Variables In Deployment Workflow: ${{ vars.FIREBASE_PROJECT_ID }}"

  publish:
    name: Build and Upload Study Bundle
    needs: [determineenvironment, vars]
    runs-on: macos-latest
    environment: ${{ needs.determineenvironment.outputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable

    - name: Build study bundle
      run: |
        swift run MHCStudyDefinitionExporterCLI export .

    - name: Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Decode and authenticate to Google Cloud
      run: |
        if [ -z "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_BASE64 }}" ]; then
          echo "ERROR: GOOGLE_APPLICATION_CREDENTIALS_BASE64 secret is not set"
          exit 1
        fi
        if [ -z "${{ needs.vars.outputs.FIREBASE_PROJECT_ID }}" ]; then
          echo "ERROR: FIREBASE_PROJECT_ID variable is not set"
          exit 1
        fi

        echo "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_BASE64 }}" | base64 -d > /tmp/gcp-key.json

        if [ ! -s /tmp/gcp-key.json ]; then
          echo "ERROR: Failed to decode credentials or file is empty"
          exit 1
        fi

        gcloud auth activate-service-account --key-file=/tmp/gcp-key.json
        gcloud config set project ${{ needs.vars.outputs.FIREBASE_PROJECT_ID }}

    - name: Upload study bundle to Firebase Storage
      run: |
        gsutil cp mhcStudyBundle.spezistudybundle.aar gs://${{ needs.vars.outputs.FIREBASE_PROJECT_ID }}.firebasestorage.app/public/

        gsutil acl ch -u AllUsers:R gs://${{ needs.vars.outputs.FIREBASE_PROJECT_ID }}.firebasestorage.app/public/mhcStudyBundle.spezistudybundle.aar

    - name: Verify upload
      run: |
        # List the files in the public directory to confirm upload
        gsutil ls gs://${{ needs.vars.outputs.FIREBASE_PROJECT_ID }}.firebasestorage.app/public/